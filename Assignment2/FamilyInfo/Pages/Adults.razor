
@using FamilyInfo.Data
@using FamilyInfo.Models
@using Microsoft.AspNetCore.Mvc.Filters
@using Microsoft.AspNetCore.Mvc.Formatters
@inject IFamilyService FamilyService
@inject NavigationManager NavigationManager
<h3>
    Adults
    <AuthorizeView Policy="Adult">
        <button @onclick="AddAdult">
            <i class="oi oi-plus" style="color:red"/>
        </button>
    </AuthorizeView>
</h3>


@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adultsToShow.Any())
{
    <p>
        <em>No Adults are added. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th></th>
            <th>ID</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Job title</th>
            <th>Hair color</th>
            <th>Eye color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>
                    <AuthorizeView Policy="Adult">
                        <button @onclick="@(() => RemoveAdultAsync(item.Id))">
                            <i class="oi oi-trash" style="color:red"/>
                        </button>
                    </AuthorizeView>
                </td>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.JobTitle</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> adultsToShow;

    protected override async Task OnInitializedAsync()
    {
        adultsToShow = FamilyService.Family.Adults;
    }

    private async Task RemoveAdultAsync(int adultId)
    {
        Adult adultToRemove = adultsToShow.First(a => a.Id == adultId);
        await FamilyService.RemoveAdultAsync(adultId);
        adultsToShow.Remove(adultToRemove);
    }

    private void Login()
    {
        NavigationManager.NavigateTo("/Security");
    }

    private void AddAdult()
    {
        NavigationManager.NavigateTo("/AddAdult");
    }

}