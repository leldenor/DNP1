
@using FamilyInfo.Data
@using FamilyInfo.Models
@inject IFamilyService FamilyService
@inject NavigationManager NavigationManager

<h3>
    Children
    <AuthorizeView Policy="Adult">
        <button @onclick="AddChild">
            <i class="oi oi-plus" style="color:red"/>
        </button>
    </AuthorizeView>
</h3>


@if (childrenToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!childrenToShow.Any())
{
    <p>
        <em>No Children in the family</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th></th><th>
                <AuthorizeView Policy="Adult">
                    Add Pet
                </AuthorizeView>
                </th>
            <th>ID</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Interests</th>
            <th>Hair color</th>
            <th>Eye color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in childrenToShow)
        {
            <tr>
                <td>
                    <AuthorizeView Policy="Adult">
                        <button @onclick="@(() => RemoveChildAsync(item.Id))">
                            <i class="oi oi-trash" style="color:red"/>
                        </button>
                    </AuthorizeView>
                </td>
                <td>
                    <AuthorizeView Policy="Adult">
                        <button @onclick="@(() => AddPet(item.Id))">
                            <i class="oi oi-plus" style="color:red"/>
                        </button>
                    </AuthorizeView>
                </td>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>
                    <table class="table">
                        <tbody>
                        @foreach (var t in @item.ChildInterests)
                        {
                            <tr>
                                @t.InterestId
                            </tr>
                        }
                        </tbody >
                    </table >
                </td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
            </tr>
        }
        </tbody>
    </table>

@if (pets())
{
    <h4>
        Child's Pets

    </h4>
    <table class="table">
        <thead>
        <tr>
            <th>Child's name</th>
            <th></th>
            <th>Species</th>
            <th>Pet's Name</th>
            <th>Pet's age</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in childrenToShow)
        {
            @foreach (var t in @item.Pets)
            {
                <tr>
                    <td>@item.FirstName</td>
                    <td>
                        <AuthorizeView Policy="Adult">
                            <button @onclick="@(() => RemovePet(t.Id))">
                                <i class="oi oi-trash" style="color:red"/>
                            </button>
                        </AuthorizeView>
                    </td>
                    <td>@t.Species</td>
                    <td>@t.Name</td>
                    <td>@t.Age</td>
                </tr>
            }
        }
        </tbody>
    </table>
}
}

@code {
    private IList<Child> childrenToShow;

    protected override async Task OnInitializedAsync()
    {
        childrenToShow = FamilyService.Family.Children;
    }

    private bool pets()
    {
        var x = false;
        foreach (var t in childrenToShow)
        {
            if (t.Pets.Count > 0)
            {
                x = true;
            }
        }
        return x;
    }

    private async Task RemoveChildAsync(int childId)
    {
        Child childToRemove = childrenToShow.First(a => a.Id == childId);
        await FamilyService.RemoveChildAsync(childId);
        childrenToShow.Remove(childToRemove);
    }

    private void RemovePet(int petId)
    {

    }

    private void AddChild()
    {
        NavigationManager.NavigateTo("/AddChild");
    }

    private void AddPet(int childId)
    {
    //NavigationManager.NavigateTo("/AddPet");
    }

}