@page "/AddChild"
@attribute [Authorize(Policy = "Adult")]
@using FamilyInformation.Data
@using FamilyInformation.Models
@inject IFamilyService FamilyService
@inject NavigationManager NavigationManager
<h3>Add Child</h3>
<div class="container">
    <div class="row">
        <div class="col-lg">
            <EditForm Model="@newChildItem" OnValidSubmit="@AddNewChildAsync">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-group">
                    First name:<br/>
                    <InputTextArea rows="1" @bind-Value="newChildItem.FirstName"/>
                </div>
                <div class="form-group">
                    Last name:<br/>
                    <InputTextArea rows="1" @bind-Value="newChildItem.LastName"/>
                </div>
                <div class="form-group">
                    Hair Color:<br/>
                    <InputTextArea rows="1" @bind-Value="newChildItem.HairColor"/>

                </div>
                <div class="form-group">
                    Eye Color:<br/>
                    <InputTextArea rows="1" @bind-Value="newChildItem.EyeColor"/>
                </div>
                <div class="form-group">
                    Age:<br/>
                    <InputNumber @bind-Value="newChildItem.Age"/>
                </div>
                <div class="form-group">
                    Weight:<br/>
                    <InputNumber @bind-Value="newChildItem.Weight"/>
                </div>
                <div class="form-group">
                    Height:<br/>
                    <InputNumber @bind-Value="newChildItem.Height"/>
                </div>
                <div class="form-group">
                    Sex:<br/>
                    <InputTextArea rows="1" @bind-Value="newChildItem.Sex"/>
                </div>
                @if (!Pets.Any() || Pets == null)
                {
                    <p>No pets added</p>
                }
                else
                {
                    <div class="form-group">
                        Pets:
                        @foreach (var item in Pets)
                        {
                            <p>@item.Species named @item.Name</p>
                        }
                    </div>
                }
                <p class="actions">
                    <button class="btn btn-outline-dark" type="submit">Create</button>
                    <button class="btn btn-outline-dark" type="button" @onclick="Families">Cancel</button>
                </p>
            </EditForm>
        </div>
        <div class="col-lg">
            <EditForm Model="@newPetItem" OnValidSubmit="@AddNewPetItem">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <h5>Pets:</h5><br/>
                <div class="form-group">
                    Species:<br/>
                    <InputTextArea rows="1" @bind-Value="newPetItem.Species"/>
                </div>
                <div class="form-group">
                    Name:<br/>
                    <InputTextArea rows="1" @bind-Value="newPetItem.Name"/>
                </div>
                <div class="form-group">
                    Age:<br/>
                    <InputNumber rows="1" @bind-Value="newPetItem.Age"/>
                </div>
                <p class="actions">
                    <button class="btn-dark" type="submit">Add</button>
                </p>
            </EditForm>
        </div>

    </div>
</div>

@code {
    private Child newChildItem = new Child();
    private Pet newPetItem = new Pet();
    private IList<Pet> Pets;
    private IList<Pet> pets;
    protected override async Task OnInitializedAsync()
    {
        Pets = newChildItem.Pets;
        IList<Family> families = await FamilyService.GetFamiliesAsync();
        pets = families.SelectMany(item => item.Pets).ToList();
        foreach (var f in families)
        {
            foreach (var p in f.Children.SelectMany(c => c.Pets))
            {
                pets.Add(p);
            }
        }
    }

    private async Task AddNewChildAsync()
    {
        await FamilyService.AddChildAsync(newChildItem);
        NavigationManager.NavigateTo("/SeeFamily");
    }

    private void AddNewPetItem()
    {
        int max = pets.Max(petId => petId.Id);
        newPetItem.Id = (++max);
        newChildItem.Pets.Add(newPetItem);
        newPetItem=new Pet();
    }

    private void AddNewChildInterest()
    {
    }

    private void Families()
    {
        NavigationManager.NavigateTo("/SeeFamily");
    }

}